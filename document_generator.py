import os
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from datetime import datetime
from app import app

def generate_der_document(client):
    """G√©n√®re un Document d'Entr√©e en Relation (DER) pour le client"""
    try:
        # Cr√©er un nouveau document
        doc = Document()
        
        # En-t√™te du conseiller
        header_para = doc.add_paragraph()
        header_para.add_run('Kim BUI, en entreprise individuelle (micro-entreprise)\n').bold = True
        header_para.add_run('N¬∞ SIREN : 930 610 084 ‚Äì APE : 68.31Z\n')
        header_para.add_run('Conseiller en Investissements Financiers (CIF), membre de l\'ANACOFI-CIF, association agr√©√©e par l\'AMF\n')
        header_para.add_run('Immatricul√© √† l\'ORIAS n¬∞ 24006088 (www.orias.fr)\n')
        header_para.add_run('Assurance Responsabilit√© Civile Professionnelle : ZURICH INSURANCE PLC ‚Äì Police n¬∞ 7400023129\n')
        header_para.add_run('Si√®ge social : 105 rue du 4 ao√ªt 1789 ‚Äì 69100 Villeurbanne\n')
        header_para.add_run('üìß kim.bui.cgp@gmail.com ‚Äì ‚òé 06.01.33.10.60\n\n')
        header_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Titre
        title = doc.add_heading('DOCUMENT D\'ENTR√âE EN RELATION (DER)', 0)
        title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        doc.add_paragraph('\n')
        
        # Date d'entr√©e en relation
        if client.date_entree_relation:
            date_para = doc.add_paragraph()
            date_para.add_run('Date d\'entr√©e en relation : ').bold = True
            date_para.add_run(client.date_entree_relation.strftime('%d/%m/%Y'))
        
        doc.add_paragraph('\n')
        
        # Informations client
        doc.add_heading('IDENTIFICATION DU CLIENT', level=1)
        
        client_info = doc.add_paragraph()
        client_info.add_run('Nom et Pr√©nom : ').bold = True
        client_info.add_run(f'{client.prenom} {client.nom}\n')
        
        client_info.add_run('Adresse √©lectronique : ').bold = True
        client_info.add_run(f'{client.email}\n')
        
        if client.telephone:
            client_info.add_run('T√©l√©phone : ').bold = True
            client_info.add_run(f'{client.telephone}\n')
        
        if client.date_naissance:
            client_info.add_run('Date de naissance : ').bold = True
            client_info.add_run(f'{client.date_naissance.strftime("%d/%m/%Y")}\n')
        
        if client.adresse:
            client_info.add_run('Adresse : ').bold = True
            client_info.add_run(f'{client.adresse}\n')
        
        if client.profession:
            client_info.add_run('Profession : ').bold = True
            client_info.add_run(f'{client.profession}\n')
        
        # Ville du client (demand√©e par l'utilisateur)
        if hasattr(client, 'ville') and client.ville:
            client_info.add_run('Ville : ').bold = True
            client_info.add_run(f'{client.ville}\n')
        
        # STATUTS L√âGAUX ET AUTORIT√âS DE TUTELLE
        doc.add_heading('STATUTS L√âGAUX ET AUTORIT√âS DE TUTELLE', level=1)
        
        statuts_text = """Votre conseiller est immatricul√© au Registre Unique des Interm√©diaires en Assurance, Banque et Finance (ORIAS) sous le n¬∞ 24006088 pour les activit√©s r√©glement√©es suivantes:

CIF enregistr√© aupr√®s de l'ANACOFI-CIF, contr√¥lable par l'AMF.

Couverture en Responsabilit√© Civile Professionnelle et Garantie Financi√®re souscrites aupr√®s de ZURICH INSURANCE PLC, n¬∞7400023129.

Montants:
‚Ä¢ Responsabilit√© Civile Professionnelle: 1 000 000,0 ‚Ç¨
‚Ä¢ Garantie financi√®re: Non appropri√©, sauf exception

Engagement √† respecter le Code de Bonne Conduite de l'ANACOFI-CIF.

Notre cabinet ne prend pas en compte les facteurs de durabilit√© dans la s√©lection des instruments financiers propos√©s.

Liste des principaux partenaires:
Shares Financial Assets, entreprise d'investissement agr√©√©e sous le num√©ro CIB 17183 par l'Autorit√© de Contr√¥le Prudentiel et de R√©solution, avec une convention de distribution de produits financiers et r√©mun√©ration par r√©trocessions/commissions."""
        
        doc.add_paragraph(statuts_text)
        
        # MODE DE FACTURATION ET R√âMUN√âRATION
        doc.add_heading('MODE DE FACTURATION ET R√âMUN√âRATION DU PROFESSIONNEL EN CIF', level=1)
        
        remuneration_text = """Bilan patrimonial obligatoire avant toute recommandation ou allocation d'actifs, avec tarifs selon complexit√©.

Accompagnement et conseil personnalis√© avec honoraires calcul√©s sur encours et/ou r√©trocessions selon produits.

Coaching patrimonial √† 200‚Ç¨ TTC par session d'une heure.

Modalit√©s g√©n√©rales:
‚Ä¢ Conseil non-ind√©pendant
‚Ä¢ Communication transparente des modes de r√©mun√©ration
‚Ä¢ Devis pr√©alable pour prestations sp√©cifiques

Mode de communication: Email, t√©l√©phone, visio, SMS.

Traitement des r√©clamations: Engagement √† traiter dans les d√©lais, possibilit√© de saisir un m√©diateur comp√©tent."""
        
        doc.add_paragraph(remuneration_text)
        
        # Documents √† fournir
        doc.add_heading('DOCUMENTS √Ä FOURNIR', level=1)
        
        docs_text = """Pour poursuivre cette relation et vous fournir un conseil adapt√©, vous devrez nous transmettre :

Documents obligatoires :
‚Ä¢ Pi√®ce d'identit√© en cours de validit√©
‚Ä¢ Avis d'imposition de l'ann√©e en cours
‚Ä¢ Justificatif de domicile de moins de 3 mois
‚Ä¢ Relev√©s de comptes bancaires des 3 derniers mois

Ces documents nous permettront d'√©valuer votre situation financi√®re et de vous proposer des solutions adapt√©es."""
        
        doc.add_paragraph(docs_text)
        
        # DATE ET SIGNATURE
        doc.add_heading('DATE ET SIGNATURE', level=1)
        
        doc.add_paragraph('\n')
        signature_table = doc.add_table(rows=4, cols=2)
        signature_table.style = 'Table Grid'
        
        # En-t√™tes
        signature_table.cell(0, 0).text = 'Le client'
        signature_table.cell(0, 1).text = 'Le conseiller'
        
        # Lieux
        ville_client = getattr(client, 'ville', '[ville du client]') if hasattr(client, 'ville') else '[ville du client]'
        signature_table.cell(1, 0).text = f'Fait √† : {ville_client}'
        signature_table.cell(1, 1).text = 'Fait √† : Villeurbanne'
        
        # Dates
        signature_table.cell(2, 0).text = 'Date et signature :'
        signature_table.cell(2, 1).text = 'Date : 08/07/2025'
        
        # Espaces pour signatures
        signature_table.cell(3, 0).text = '\n\n\n'
        signature_table.cell(3, 1).text = 'Signature :\n\n\n'
        
        # Sauvegarder le document
        filename = f'der_{client.id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.docx'
        filepath = os.path.join(app.config['GENERATED_DOCS_FOLDER'], filename)
        doc.save(filepath)
        
        return filepath
        
    except Exception as e:
        print(f"Erreur g√©n√©ration DER: {e}")
        return None

def generate_investment_report(client):
    """G√©n√®re un rapport d'ad√©quation pour le client"""
    try:
        # Cr√©er un nouveau document
        doc = Document()
        
        # Titre
        title = doc.add_heading('RAPPORT D\'AD√âQUATION', 0)
        title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Informations client
        doc.add_heading('INFORMATIONS CLIENT', level=1)
        
        client_info = doc.add_paragraph()
        client_info.add_run('Nom: ').bold = True
        client_info.add_run(f'{client.prenom} {client.nom}\n')
        
        client_info.add_run('Email: ').bold = True
        client_info.add_run(f'{client.email}\n')
        
        if client.telephone:
            client_info.add_run('T√©l√©phone: ').bold = True
            client_info.add_run(f'{client.telephone}\n')
        
        if client.date_naissance:
            client_info.add_run('Date de naissance: ').bold = True
            client_info.add_run(f'{client.date_naissance.strftime("%d/%m/%Y")}\n')
        
        if client.profession:
            client_info.add_run('Profession: ').bold = True
            client_info.add_run(f'{client.profession}\n')
        
        # Situation financi√®re
        doc.add_heading('SITUATION FINANCI√àRE', level=1)
        
        finance_info = doc.add_paragraph()
        if client.revenus_mensuels:
            finance_info.add_run('Revenus mensuels: ').bold = True
            finance_info.add_run(f'{client.revenus_mensuels:,.0f} ‚Ç¨\n')
        
        if client.patrimoine_total:
            finance_info.add_run('Patrimoine total: ').bold = True
            finance_info.add_run(f'{client.patrimoine_total:,.0f} ‚Ç¨\n')
        
        if client.charges_mensuelles:
            finance_info.add_run('Charges mensuelles: ').bold = True
            finance_info.add_run(f'{client.charges_mensuelles:,.0f} ‚Ç¨\n')
        
        # Profil investisseur
        doc.add_heading('PROFIL INVESTISSEUR', level=1)
        
        profil_info = doc.add_paragraph()
        if client.tolerance_risque:
            profil_info.add_run('Tol√©rance au risque: ').bold = True
            profil_info.add_run(f'{client.tolerance_risque.value}\n')
        
        if client.horizon_investissement:
            profil_info.add_run('Horizon d\'investissement: ').bold = True
            profil_info.add_run(f'{client.horizon_investissement.value}\n')
        
        if client.experience_financiere:
            profil_info.add_run('Exp√©rience financi√®re: ').bold = True
            profil_info.add_run(f'{client.experience_financiere}\n')
        
        if client.profil_score:
            profil_info.add_run('Score de profil: ').bold = True
            profil_info.add_run(f'{client.profil_score}/5\n')
        
        # Recommandations
        doc.add_heading('RECOMMANDATIONS', level=1)
        
        recommandations = get_recommandations(client)
        for rec in recommandations:
            doc.add_paragraph(rec, style='List Bullet')
        
        # Date et signature
        doc.add_paragraph('\n\n')
        signature = doc.add_paragraph()
        signature.add_run(f'Rapport g√©n√©r√© le {datetime.now().strftime("%d/%m/%Y √† %H:%M")}\n')
        signature.add_run('Conseiller en Gestion de Patrimoine\n')
        signature.add_run('Signature: _________________________')
        
        # Sauvegarder le document
        filename = f'rapport_adequation_{client.id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.docx'
        filepath = os.path.join(app.config['GENERATED_DOCS_FOLDER'], filename)
        doc.save(filepath)
        
        return filepath
        
    except Exception as e:
        print(f"Erreur g√©n√©ration rapport: {e}")
        return None

def generate_mission_letter(client):
    """G√©n√®re une lettre de mission pour le client"""
    try:
        # Cr√©er un nouveau document
        doc = Document()
        
        # En-t√™te
        header = doc.add_paragraph()
        header.add_run('LETTRE DE MISSION\n').bold = True
        header.add_run('CONSEIL EN INVESTISSEMENT FINANCIER')
        header.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        doc.add_paragraph('\n')
        
        # Date
        date_para = doc.add_paragraph()
        date_para.add_run(f'Le {datetime.now().strftime("%d/%m/%Y")}')
        date_para.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        
        doc.add_paragraph('\n')
        
        # Destinataire
        dest_para = doc.add_paragraph()
        dest_para.add_run('Madame/Monsieur ').bold = True
        dest_para.add_run(f'{client.prenom} {client.nom}\n')
        if client.adresse:
            dest_para.add_run(client.adresse)
        
        doc.add_paragraph('\n')
        
        # Objet
        objet = doc.add_paragraph()
        objet.add_run('Objet: ').bold = True
        objet.add_run('Mission de conseil en investissement financier')
        
        doc.add_paragraph('\n')
        
        # Corps de la lettre
        doc.add_paragraph('Madame, Monsieur,')
        
        doc.add_paragraph('Suite √† notre entretien et √† l\'analyse de votre situation patrimoniale, '
                         'nous avons le plaisir de vous proposer une mission de conseil en investissement financier.')
        
        # Profil client
        doc.add_heading('VOTRE PROFIL INVESTISSEUR', level=1)
        
        profil_text = f"""Bas√© sur le questionnaire compl√©t√©, votre profil investisseur se caract√©rise par :
        
‚Ä¢ Tol√©rance au risque : {client.tolerance_risque.value if client.tolerance_risque else 'Non d√©finie'}
‚Ä¢ Horizon d'investissement : {client.horizon_investissement.value if client.horizon_investissement else 'Non d√©fini'}
‚Ä¢ Score de profil : {client.profil_score if client.profil_score else 'Non d√©fini'}/5"""
        
        doc.add_paragraph(profil_text)
        
        # Services propos√©s
        doc.add_heading('NOS SERVICES', level=1)
        
        services = [
            "Analyse de votre situation patrimoniale globale",
            "Recommandations d'investissement adapt√©es √† votre profil",
            "S√©lection de supports d'investissement",
            "Suivi r√©gulier de vos investissements",
            "Reporting p√©riodique sur la performance de vos placements"
        ]
        
        for service in services:
            doc.add_paragraph(service, style='List Bullet')
        
        # Modalit√©s
        doc.add_heading('MODALIT√âS', level=1)
        
        modalites_text = """Cette mission s'exercera dans le cadre de la r√©glementation en vigueur relative au conseil 
en investissement financier. Les recommandations formul√©es tiendront compte de votre profil investisseur, 
de vos objectifs et de votre situation financi√®re."""
        
        doc.add_paragraph(modalites_text)
        
        # Conclusion
        doc.add_paragraph('\n')
        doc.add_paragraph('Nous esp√©rons que cette proposition retiendra votre attention et nous tenons √† votre '
                         'disposition pour tout compl√©ment d\'information.')
        
        doc.add_paragraph('Dans l\'attente de votre retour, nous vous prions d\'agr√©er, Madame, Monsieur, '
                         'l\'expression de nos salutations distingu√©es.')
        
        # Signature
        doc.add_paragraph('\n\n')
        signature = doc.add_paragraph()
        signature.add_run('Le Conseiller en Gestion de Patrimoine\n\n\n')
        signature.add_run('Signature et cachet : _________________________')
        
        # Sauvegarder le document
        filename = f'lettre_mission_{client.id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.docx'
        filepath = os.path.join(app.config['GENERATED_DOCS_FOLDER'], filename)
        doc.save(filepath)
        
        return filepath
        
    except Exception as e:
        print(f"Erreur g√©n√©ration lettre: {e}")
        return None

def generate_kyc_document(client):
    """G√©n√®re un document KYC compilant toutes les informations client"""
    try:
        doc = Document()
        
        # Titre
        title = doc.add_heading('DOCUMENT KYC - CONNAISSANCE CLIENT', 0)
        title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Date
        doc.add_paragraph(f'G√©n√©r√© le {datetime.now().strftime("%d/%m/%Y √† %H:%M")}')
        
        # Informations personnelles compl√®tes
        doc.add_heading('INFORMATIONS PERSONNELLES', level=1)
        
        info_table = doc.add_table(rows=8, cols=2)
        info_table.style = 'Table Grid'
        
        info_table.cell(0, 0).text = 'Nom et Pr√©nom'
        info_table.cell(0, 1).text = f'{client.prenom} {client.nom}'
        
        info_table.cell(1, 0).text = 'Email'
        info_table.cell(1, 1).text = client.email
        
        info_table.cell(2, 0).text = 'T√©l√©phone'
        info_table.cell(2, 1).text = client.telephone or 'Non renseign√©'
        
        info_table.cell(3, 0).text = 'Date de naissance'
        info_table.cell(3, 1).text = client.date_naissance.strftime('%d/%m/%Y') if client.date_naissance else 'Non renseign√©e'
        
        info_table.cell(4, 0).text = 'Profession'
        info_table.cell(4, 1).text = client.profession or 'Non renseign√©e'
        
        info_table.cell(5, 0).text = 'Adresse'
        info_table.cell(5, 1).text = client.adresse or 'Non renseign√©e'
        
        info_table.cell(6, 0).text = 'Date d\'entr√©e en relation'
        info_table.cell(6, 1).text = client.date_entree_relation.strftime('%d/%m/%Y') if client.date_entree_relation else 'Non renseign√©e'
        
        info_table.cell(7, 0).text = 'Statut workflow'
        info_table.cell(7, 1).text = client.statut_workflow.value
        
        # Situation financi√®re
        doc.add_heading('SITUATION FINANCI√àRE', level=1)
        
        finance_table = doc.add_table(rows=3, cols=2)
        finance_table.style = 'Table Grid'
        
        finance_table.cell(0, 0).text = 'Revenus mensuels'
        finance_table.cell(0, 1).text = f'{client.revenus_mensuels:,.0f} ‚Ç¨' if client.revenus_mensuels else 'Non renseign√©'
        
        finance_table.cell(1, 0).text = 'Charges mensuelles'
        finance_table.cell(1, 1).text = f'{client.charges_mensuelles:,.0f} ‚Ç¨' if client.charges_mensuelles else 'Non renseign√©'
        
        finance_table.cell(2, 0).text = 'Patrimoine total'
        finance_table.cell(2, 1).text = f'{client.patrimoine_total:,.0f} ‚Ç¨' if client.patrimoine_total else 'Non renseign√©'
        
        # Profil investisseur
        if client.tolerance_risque or client.horizon_investissement:
            doc.add_heading('PROFIL INVESTISSEUR', level=1)
            
            profil_table = doc.add_table(rows=5, cols=2)
            profil_table.style = 'Table Grid'
            
            profil_table.cell(0, 0).text = 'Tol√©rance au risque'
            profil_table.cell(0, 1).text = client.tolerance_risque.value if client.tolerance_risque else 'Non d√©finie'
            
            profil_table.cell(1, 0).text = 'Horizon d\'investissement'
            profil_table.cell(1, 1).text = client.horizon_investissement.value if client.horizon_investissement else 'Non d√©fini'
            
            profil_table.cell(2, 0).text = 'Exp√©rience financi√®re'
            profil_table.cell(2, 1).text = client.experience_financiere or 'Non renseign√©e'
            
            profil_table.cell(3, 0).text = 'Objectifs d\'investissement'
            profil_table.cell(3, 1).text = client.objectifs_investissement or 'Non renseign√©s'
            
            profil_table.cell(4, 0).text = 'Score de profil'
            profil_table.cell(4, 1).text = f'{client.profil_score}/5' if client.profil_score else 'Non calcul√©'
        
        # Signature
        doc.add_paragraph('\n\n')
        signature = doc.add_paragraph()
        signature.add_run('Ce document certifie la v√©racit√© des informations recueillies.\n')
        signature.add_run('Signature client : _________________________    ')
        signature.add_run('Signature conseiller : _________________________')
        
        # Sauvegarder
        filename = f'kyc_{client.id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.docx'
        filepath = os.path.join(app.config['GENERATED_DOCS_FOLDER'], filename)
        doc.save(filepath)
        
        return filepath
        
    except Exception as e:
        print(f"Erreur g√©n√©ration KYC: {e}")
        return None

def get_recommandations(client):
    """G√©n√®re des recommandations bas√©es sur le profil client"""
    recommandations = []
    
    if not client.tolerance_risque:
        return ["Profil de risque non d√©fini - Veuillez compl√©ter le questionnaire"]
    
    # Recommandations selon la tol√©rance au risque
    if client.tolerance_risque.name == 'FAIBLE':
        recommandations.extend([
            "Privil√©gier les placements s√©curis√©s (fonds euros, obligations d'√âtat)",
            "Limiter l'exposition aux actifs risqu√©s √† 20% maximum",
            "Diversifier sur plusieurs supports de m√™me niveau de risque",
            "Envisager l'√©pargne r√©glement√©e (Livret A, LDDS) pour la liquidit√©"
        ])
    
    elif client.tolerance_risque.name == 'MOYENNE':
        recommandations.extend([
            "√âquilibrer entre s√©curit√© (60%) et croissance (40%)",
            "Investir en unit√©s de compte diversifi√©es",
            "Privil√©gier les fonds mixtes √©quilibr√©s",
            "Envisager l'immobilier locatif ou les SCPI"
        ])
    
    else:  # ELEVEE
        recommandations.extend([
            "Optimiser le potentiel de croissance avec 70% d'actifs dynamiques",
            "Diversifier sur les actions europ√©ennes et internationales",
            "Envisager les investissements th√©matiques ou sectoriels",
            "Consid√©rer les produits structur√©s avec capital non garanti"
        ])
    
    # Recommandations selon l'horizon
    if client.horizon_investissement:
        if client.horizon_investissement.name == 'COURT':
            recommandations.append("Privil√©gier la liquidit√© avec des placements facilement mobilisables")
        elif client.horizon_investissement.name == 'MOYEN':
            recommandations.append("√âquilibrer rendement et accessibilit√© des fonds")
        else:  # LONG
            recommandations.append("Maximiser le potentiel de croissance √† long terme")
    
    return recommandations
